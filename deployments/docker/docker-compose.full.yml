version: '3.8'

services:
  # Main l8e-harbor API service
  l8e-harbor-api:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    ports:
      - "8443:8443"
    environment:
      - L8E_AUTH_ADAPTER=local
      - L8E_SECRET_PROVIDER=file
      - L8E_ROUTE_STORE=file
      - L8E_JWT_PRIVATE_KEY_FILE=/app/secrets/jwt-private.pem
      - L8E_JWT_PUBLIC_KEY_FILE=/app/secrets/jwt-public.pem
      - L8E_CONFIG_FILE=/app/config/harbor.yaml
    volumes:
      - shared-data:/app/shared
      - ./config:/app/config:ro
      - jwt-keys:/app/secrets
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8443/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # UI service
  l8e-harbor-ui:
    build:
      context: ../../ui
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - API_BASE_URL=http://localhost:8443
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    depends_on:
      l8e-harbor-api:
        condition: service_healthy

  # Admin initialization service
  admin-init:
    build:
      context: .
      dockerfile: admin-init.dockerfile
    environment:
      - API_BASE_URL=http://l8e-harbor-api:8443
      - UI_BASE_URL=http://localhost:3000
      - ADMIN_USERNAME=admin
      - ADMIN_CREDS_FILE=/shared/admin-credentials.json
      - JWT_KEYS_DIR=/shared/jwt-keys
    volumes:
      - shared-data:/shared
      - jwt-keys:/shared/jwt-keys
    depends_on:
      l8e-harbor-api:
        condition: service_healthy
    restart: "no"

  # Optional: PostgreSQL for production route storage
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=l8e_harbor
      - POSTGRES_USER=l8e_harbor
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U l8e_harbor"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    secrets:
      - postgres_password
    profiles: ["postgres"]

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass "${REDIS_PASSWORD:-l8e-harbor-redis}"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles: ["redis"]

volumes:
  shared-data:
    driver: local
  jwt-keys:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt

networks:
  default:
    name: l8e-harbor-network